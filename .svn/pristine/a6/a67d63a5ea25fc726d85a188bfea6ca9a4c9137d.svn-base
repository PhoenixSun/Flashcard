package com.example.android.flashcard;

import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.RectF;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.v7.app.AlertDialog;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.helper.ItemTouchHelper;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;

import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

import java.util.ArrayList;

public class CardBrowseActivity extends BaseActivity implements View.OnClickListener{

    private ArrayList<Flashcard> cards =  new ArrayList<>();
    private ArrayList<String> keys = new ArrayList<>();

    private FirebaseDatabase mDatabase;
    private DatabaseReference mListReference;

    private CardAdapter mCardAdapter;
    private RecyclerView mRecyclerView;
    private AlertDialog.Builder mEditDialog;
    private AlertDialog.Builder mDeleteDialog;
    private EditText mTermEditText;
    private EditText mDefinitionEditText;

    private int edit_position;
    private int delete_position;
    private View view;
    private boolean wantToAdd = false;
    private Paint paint = new Paint();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_card_browse);

        initViews();
        initEditDialog();
        initDeleteDialog();
        initDatabase();
    }

    private void initViews(){
        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.add);
        FloatingActionButton toggle = (FloatingActionButton) findViewById(R.id.toggle);
        fab.setOnClickListener(this);
//        toggle.setOnClickListener(this);
        mRecyclerView = (RecyclerView) findViewById(R.id.card_recycler_view);
        mRecyclerView.setHasFixedSize(true);

        mRecyclerView.setLayoutManager(new LinearLayoutManager(getApplicationContext()));
        mCardAdapter = new CardAdapter(cards);

        mRecyclerView.setAdapter(mCardAdapter);
        mCardAdapter.notifyDataSetChanged();
        initSwipe();

    }

    private void initSwipe(){
        ItemTouchHelper.SimpleCallback simpleItemTouchCallback =
                new ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT) {

                    @Override
                    public boolean onMove(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder,
                                          RecyclerView.ViewHolder target) {
                        return false;
                    }

                    @Override
                    public void onSwiped(RecyclerView.ViewHolder viewHolder, int direction) {
                        int position = viewHolder.getAdapterPosition();

                        if (direction == ItemTouchHelper.LEFT){
                            // delete the folder if user swipes to the left
                            removeView();
                            delete_position = position;
                            mDeleteDialog.show();
                        } else {
                            // edit the name of the folder if user swipes to the right
                            removeView();
                            edit_position = position;
                            mEditDialog.setTitle("Edit Flashcard");
                            mTermEditText.setText(cards.get(position).getTerm());
                            mDefinitionEditText.setText(cards.get(position).getDefinition());
                            mEditDialog.show();
                        }
                    }

                    @Override
                    public void onChildDraw(Canvas c, RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder,
                                            float dX, float dY, int actionState, boolean isCurrentlyActive) {

                        Bitmap icon;
                        if(actionState == ItemTouchHelper.ACTION_STATE_SWIPE){

                            View itemView = viewHolder.itemView;
                            float height = (float) itemView.getBottom() - (float) itemView.getTop();
                            float width = height / 3;

                            if(dX > 0) {  // right swipe will draw green background with an edit icon
                                paint.setColor(Color.parseColor("#388E3C"));
                                RectF background = new RectF((float) itemView.getLeft(), (float) itemView.getTop(),
                                        dX, (float) itemView.getBottom());
                                c.drawRect(background, paint);
                                icon = BitmapFactory.decodeResource(getResources(), R.drawable.ic_edit_white);
                                RectF icon_dest = new RectF((float) itemView.getLeft() + width, (float) itemView.getTop() + width,
                                        (float) itemView.getLeft() + 2*width, (float)itemView.getBottom() - width);
                                c.drawBitmap(icon, null, icon_dest, paint);
                            }
                            else if (dX < 0) {  // left swipe will draw red background with a delete icon
                                paint.setColor(Color.parseColor("#D32F2F"));
                                RectF background = new RectF((float) itemView.getRight() + dX, (float) itemView.getTop(),
                                        (float) itemView.getRight(), (float) itemView.getBottom());
                                c.drawRect(background, paint);
                                icon = BitmapFactory.decodeResource(getResources(), R.drawable.ic_delete_white);
                                RectF icon_dest = new RectF((float) itemView.getRight() - 2*width, (float) itemView.getTop() + width,
                                        (float) itemView.getRight() - width,(float)itemView.getBottom() - width);
                                c.drawBitmap(icon, null, icon_dest, paint);
                            }
                        }
                        super.onChildDraw(c, recyclerView, viewHolder, dX, dY, actionState, isCurrentlyActive);
                    }
                };
        ItemTouchHelper itemTouchHelper = new ItemTouchHelper(simpleItemTouchCallback);
        itemTouchHelper.attachToRecyclerView(mRecyclerView);
    }

    private void initDatabase() {
        mDatabase = FirebaseDatabase.getInstance();
        mListReference = mDatabase.getReference("card_lists/" + getIntent().getStringExtra("FOLDER_KEY"));

        mListReference.addChildEventListener(new ChildEventListener() {
            @Override
            public void onChildAdded(DataSnapshot dataSnapshot, String s) {
                keys.add(dataSnapshot.getKey());
                cards.add(dataSnapshot.getValue(Flashcard.class));
                mCardAdapter.notifyDataSetChanged();
            }

            @Override
            public void onChildChanged(DataSnapshot dataSnapshot, String s) {
                int index = keys.indexOf(dataSnapshot.getKey());
                cards.set(index, dataSnapshot.getValue(Flashcard.class));
                mCardAdapter.notifyDataSetChanged();
            }

            @Override
            public void onChildRemoved(DataSnapshot dataSnapshot) {
                int index = keys.indexOf(dataSnapshot.getKey());
                keys.remove(index);
                cards.remove(index);
                mCardAdapter.notifyDataSetChanged();
            }

            @Override
            public void onChildMoved(DataSnapshot dataSnapshot, String s) {

            }

            @Override
            public void onCancelled(DatabaseError databaseError) {

            }
        });
    }

    private void removeView(){
        if(view.getParent() != null) {
            ((ViewGroup) view.getParent()).removeView(view);
        }
    }

    private void initEditDialog(){
        mEditDialog = new AlertDialog.Builder(this);
        view = getLayoutInflater().inflate(R.layout.edit_card_dialog_layout, null);
        mEditDialog.setView(view);
        mEditDialog.setCancelable(false);
        mEditDialog.setPositiveButton("Save", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                String inputTerm = mTermEditText.getText().toString().trim();
                String inputDefinition = mDefinitionEditText.getText().toString().trim();

                // Don't communicate to the server if user enters nothing
                if (inputTerm.equals("") || inputDefinition.equals("")) {
                    mCardAdapter.notifyDataSetChanged();
                    return;
                }

                Flashcard card = new Flashcard(inputTerm, inputDefinition);

                // Decide whether the user wants to add a folder or edit a folder name
                if(wantToAdd) {
                    wantToAdd = false;
                    String key = mListReference.push().getKey();
                    mListReference.child(key).setValue(card);
                    dialog.dismiss();
                } else {
                    String key = keys.get(edit_position);
                    mListReference.child(key).setValue(card);
                    dialog.dismiss();
                }
            }
        });
        mEditDialog.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                mCardAdapter.notifyDataSetChanged();
            }
        });
        mTermEditText = (EditText) view.findViewById(R.id.term_edit_text);
        mDefinitionEditText = (EditText) view.findViewById(R.id.definition_edit_text);
    }

    private void initDeleteDialog() {
        mDeleteDialog = new AlertDialog.Builder(this);
        mDeleteDialog.setMessage(getString(R.string.delete_confirm));
        mDeleteDialog.setCancelable(false);
        mDeleteDialog.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                String key = keys.get(delete_position);
                mListReference.child(key).setValue(null);
            }
        });
        mDeleteDialog.setNegativeButton("No", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                mCardAdapter.notifyDataSetChanged();
            }
        });
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.add:
                removeView();
                wantToAdd = true;
                mEditDialog.setTitle("Add a new card");
                mTermEditText.setText("");
                mDefinitionEditText.setText("");
                mEditDialog.show();
                break;

        }
    }

    public void updateUI(FirebaseUser user) {
        if (user == null) {
            Intent intent = new Intent(CardBrowseActivity.this, GoogleSignInActivity.class);
            startActivity(intent);
        }
    }
}